// Code generated by iacg; DO NOT EDIT.
package tke

import (
	"context"
	"fmt"
	"log"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	tke "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/tke/v20180525"
	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func ResourceTencentCloudKubernetesAuthAttachment() *schema.Resource {
	return &schema.Resource{
		Create: resourceTencentCloudKubernetesAuthAttachmentCreate,
		Read:   resourceTencentCloudKubernetesAuthAttachmentRead,
		Update: resourceTencentCloudKubernetesAuthAttachmentUpdate,
		Delete: resourceTencentCloudKubernetesAuthAttachmentDelete,
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Schema: map[string]*schema.Schema{
			"cluster_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: "ID of clusters.",
			},

			"use_tke_default": {
				Type:          schema.TypeBool,
				Optional:      true,
				ConflictsWith: []string{"issuer", "jwks_uri"},
				Description:   "If set to `true`, the issuer and jwks_uri will be generated automatically by tke, please do not set issuer and jwks_uri.",
			},

			"issuer": {
				Type:          schema.TypeString,
				Optional:      true,
				ConflictsWith: []string{"use_tke_default"},
				Description:   "Specify service-account-issuer. If use_tke_default is set to `true`, please do not set this field.",
			},

			"jwks_uri": {
				Type:          schema.TypeString,
				Optional:      true,
				ConflictsWith: []string{"use_tke_default"},
				Description:   "Specify service-account-jwks-uri. If use_tke_default is set to `true`, please do not set this field.",
			},

			"auto_create_discovery_anonymous_auth": {
				Type:        schema.TypeBool,
				Optional:    true,
				Default:     false,
				Description: "If set to `true`, the rbac rule will be created automatically which allow anonymous user to access '/.well-known/openid-configuration' and '/openid/v1/jwks'.",
			},

			"auto_create_oidc_config": {
				Type:        schema.TypeBool,
				Optional:    true,
				Computed:    true,
				Description: "Creating an identity provider.",
			},

			"auto_create_client_id": {
				Type:        schema.TypeSet,
				Optional:    true,
				Computed:    true,
				Description: "Creating ClientId of the identity provider.",
				Elem: &schema.Schema{
					Type: schema.TypeString,
				},
			},

			"auto_install_pod_identity_webhook_addon": {
				Type:        schema.TypeBool,
				Optional:    true,
				Computed:    true,
				Description: "Creating the PodIdentityWebhook component. if `auto_create_oidc_config` is true, this field must set true.",
			},

			"tke_default_issuer": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The default issuer of tke. If use_tke_default is set to `true`, this parameter will be set to the default value.",
			},

			"tke_default_jwks_uri": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: "The default jwks_uri of tke. If use_tke_default is set to `true`, this parameter will be set to the default value.",
			},
		},
	}
}

func resourceTencentCloudKubernetesAuthAttachmentCreate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_kubernetes_auth_attachment.create")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	var (
		clusterId string
	)
	var (
		request  = tke.NewModifyClusterAuthenticationOptionsRequest()
		response = tke.NewModifyClusterAuthenticationOptionsResponse()
	)

	if v, ok := d.GetOk("cluster_id"); ok {
		clusterId = v.(string)
	}

	if v, ok := d.GetOk("cluster_id"); ok {
		request.ClusterId = helper.String(v.(string))
	}

	serviceAccountAuthenticationOptions := tke.ServiceAccountAuthenticationOptions{}
	if v, ok := d.GetOkExists("use_tke_default"); ok {
		serviceAccountAuthenticationOptions.UseTKEDefault = helper.Bool(v.(bool))
	}
	if v, ok := d.GetOk("issuer"); ok {
		serviceAccountAuthenticationOptions.Issuer = helper.String(v.(string))
	}
	if v, ok := d.GetOk("jwksuri"); ok {
		serviceAccountAuthenticationOptions.JWKSURI = helper.String(v.(string))
	}
	if v, ok := d.GetOkExists("auto_create_discovery_anonymous_auth"); ok {
		serviceAccountAuthenticationOptions.AutoCreateDiscoveryAnonymousAuth = helper.Bool(v.(bool))
	}
	request.ServiceAccounts = &serviceAccountAuthenticationOptions

	oIDCConfigAuthenticationOptions := tke.OIDCConfigAuthenticationOptions{}
	if v, ok := d.GetOkExists("auto_create_oidc_config"); ok {
		oIDCConfigAuthenticationOptions.AutoCreateOIDCConfig = helper.Bool(v.(bool))
	}
	if v, ok := d.GetOk("auto_create_client_id"); ok {
		autoCreateClientIdSet := v.(*schema.Set).List()
		for i := range autoCreateClientIdSet {
			autoCreateClientId := autoCreateClientIdSet[i].(string)
			oIDCConfigAuthenticationOptions.AutoCreateClientId = append(oIDCConfigAuthenticationOptions.AutoCreateClientId, helper.String(autoCreateClientId))
		}
	}
	if v, ok := d.GetOkExists("auto_install_pod_identity_webhook_addon"); ok {
		oIDCConfigAuthenticationOptions.AutoInstallPodIdentityWebhookAddon = helper.Bool(v.(bool))
	}
	request.OIDCConfig = &oIDCConfigAuthenticationOptions

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		if err := resourceTencentCloudKubernetesAuthAttachmentCreatePreRequest0(ctx, request); err != nil {
			return err
		}

		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTkeClient().ModifyClusterAuthenticationOptionsWithContext(ctx, request)
		if e != nil {
			if err := resourceTencentCloudKubernetesAuthAttachmentCreateRequestOnError0(ctx, request, e); err != nil {
				return err
			}
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s create kubernetes auth attachment failed, reason:%+v", logId, err)
		return err
	}

	_ = response

	d.SetId(clusterId)

	return resourceTencentCloudKubernetesAuthAttachmentRead(d, meta)
}

func resourceTencentCloudKubernetesAuthAttachmentRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_kubernetes_auth_attachment.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := TkeService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	clusterId := d.Id()

	_ = d.Set("cluster_id", clusterId)

	respData, err := service.DescribeKubernetesAuthAttachmentById(ctx, clusterId)
	if err != nil {
		return err
	}

	err = resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeKubernetesAuthAttachmentById(ctx, clusterId)
		if e != nil {
			return tccommon.RetryError(e)
		}
		if err := resourceTencentCloudKubernetesAuthAttachmentReadRequestOnSuccess0(ctx, result); err != nil {
			return err
		}
		respData = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s read kubernetes auth attachment failed, reason:%+v", logId, err)
		return err
	}

	if respData == nil {
		d.SetId("")
		log.Printf("[WARN]%s resource `kubernetes_auth_attachment` [%s] not found, please check if it has been deleted.\n", logId, d.Id())
		return nil
	}
	if respData.ServiceAccounts != nil {
		if respData.ServiceAccounts.UseTKEDefault != nil {
			_ = d.Set("use_tke_default", respData.ServiceAccounts.UseTKEDefault)
		}

		if respData.ServiceAccounts.Issuer != nil {
			_ = d.Set("issuer", respData.ServiceAccounts.Issuer)
		}

		if respData.ServiceAccounts.JWKSURI != nil {
			_ = d.Set("jwks_uri", respData.ServiceAccounts.JWKSURI)
		}

		if respData.ServiceAccounts.AutoCreateDiscoveryAnonymousAuth != nil {
			_ = d.Set("auto_create_discovery_anonymous_auth", respData.ServiceAccounts.AutoCreateDiscoveryAnonymousAuth)
		}

	}

	if respData.OIDCConfig != nil {
		if respData.OIDCConfig.AutoCreateOIDCConfig != nil {
			_ = d.Set("auto_create_oidc_config", respData.OIDCConfig.AutoCreateOIDCConfig)
		}

		if respData.OIDCConfig.AutoCreateClientId != nil {
			_ = d.Set("auto_create_client_id", respData.OIDCConfig.AutoCreateClientId)
		}

		if respData.OIDCConfig.AutoInstallPodIdentityWebhookAddon != nil {
			_ = d.Set("auto_install_pod_identity_webhook_addon", respData.OIDCConfig.AutoInstallPodIdentityWebhookAddon)
		}

	}

	return nil
}

func resourceTencentCloudKubernetesAuthAttachmentUpdate(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_kubernetes_auth_attachment.update")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)

	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	immutableArgs := []string{"cluster_id"}
	for _, v := range immutableArgs {
		if d.HasChange(v) {
			return fmt.Errorf("argument `%s` cannot be changed", v)
		}
	}
	clusterId := d.Id()

	needChange := false
	mutableArgs := []string{"use_tke_default", "issuer", "jwksuri", "auto_create_discovery_anonymous_auth", "auto_create_oidc_config", "auto_create_client_id", "auto_install_pod_identity_webhook_addon"}
	for _, v := range mutableArgs {
		if d.HasChange(v) {
			needChange = true
			break
		}
	}

	if needChange {
		request := tke.NewModifyClusterAuthenticationOptionsRequest()

		request.ClusterId = &clusterId

		serviceAccountAuthenticationOptions := tke.ServiceAccountAuthenticationOptions{}
		if v, ok := d.GetOkExists("use_tke_default"); ok {
			serviceAccountAuthenticationOptions.UseTKEDefault = helper.Bool(v.(bool))
		}
		if v, ok := d.GetOk("issuer"); ok {
			serviceAccountAuthenticationOptions.Issuer = helper.String(v.(string))
		}
		if v, ok := d.GetOk("jwks_uri"); ok {
			serviceAccountAuthenticationOptions.JWKSURI = helper.String(v.(string))
		}
		if v, ok := d.GetOkExists("auto_create_discovery_anonymous_auth"); ok {
			serviceAccountAuthenticationOptions.AutoCreateDiscoveryAnonymousAuth = helper.Bool(v.(bool))
		}
		request.ServiceAccounts = &serviceAccountAuthenticationOptions

		oIDCConfigAuthenticationOptions := tke.OIDCConfigAuthenticationOptions{}
		if v, ok := d.GetOkExists("auto_create_oidc_config"); ok {
			oIDCConfigAuthenticationOptions.AutoCreateOIDCConfig = helper.Bool(v.(bool))
		}
		if v, ok := d.GetOk("auto_create_client_id"); ok {
			autoCreateClientIdSet := v.(*schema.Set).List()
			for i := range autoCreateClientIdSet {
				autoCreateClientId := autoCreateClientIdSet[i].(string)
				oIDCConfigAuthenticationOptions.AutoCreateClientId = append(oIDCConfigAuthenticationOptions.AutoCreateClientId, helper.String(autoCreateClientId))
			}
		}
		if v, ok := d.GetOkExists("auto_install_pod_identity_webhook_addon"); ok {
			oIDCConfigAuthenticationOptions.AutoInstallPodIdentityWebhookAddon = helper.Bool(v.(bool))
		}
		request.OIDCConfig = &oIDCConfigAuthenticationOptions

		err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
			if err := resourceTencentCloudKubernetesAuthAttachmentUpdatePreRequest0(ctx, request); err != nil {
				return err
			}

			result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTkeClient().ModifyClusterAuthenticationOptionsWithContext(ctx, request)
			if e != nil {
				if err := resourceTencentCloudKubernetesAuthAttachmentUpdateRequestOnError0(ctx, request, e); err != nil {
					return err
				}
				return tccommon.RetryError(e)
			} else {
				log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
			}
			return nil
		})
		if err != nil {
			log.Printf("[CRITAL]%s update kubernetes auth attachment failed, reason:%+v", logId, err)
			return err
		}
	}

	return resourceTencentCloudKubernetesAuthAttachmentRead(d, meta)
}

func resourceTencentCloudKubernetesAuthAttachmentDelete(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("resource.tencentcloud_kubernetes_auth_attachment.delete")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(tccommon.ContextNil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	clusterId := d.Id()

	var (
		request  = tke.NewModifyClusterAuthenticationOptionsRequest()
		response = tke.NewModifyClusterAuthenticationOptionsResponse()
	)

	if v, ok := d.GetOk("cluster_id"); ok {
		clusterId = v.(string)
	}

	request.ClusterId = &clusterId

	err := resource.Retry(tccommon.WriteRetryTimeout, func() *resource.RetryError {
		if err := resourceTencentCloudKubernetesAuthAttachmentDeletePreRequest0(ctx, request); err != nil {
			return err
		}

		result, e := meta.(tccommon.ProviderMeta).GetAPIV3Conn().UseTkeClient().ModifyClusterAuthenticationOptionsWithContext(ctx, request)
		if e != nil {
			return tccommon.RetryError(e)
		} else {
			log.Printf("[DEBUG]%s api[%s] success, request body [%s], response body [%s]\n", logId, request.GetAction(), request.ToJsonString(), result.ToJsonString())
		}
		response = result
		return nil
	})
	if err != nil {
		log.Printf("[CRITAL]%s create kubernetes auth attachment failed, reason:%+v", logId, err)
		return err
	}

	_ = response
	if err := resourceTencentCloudKubernetesAuthAttachmentDeletePostHandleResponse0(ctx, response); err != nil {
		return err
	}

	return nil
}
