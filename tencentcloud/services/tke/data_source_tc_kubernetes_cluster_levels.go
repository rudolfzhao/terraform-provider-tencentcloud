// Code generated by iacg; DO NOT EDIT.
package tke

import (
	"context"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	tke "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/tke/v20180525"

	tccommon "github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/common"
	"github.com/tencentcloudstack/terraform-provider-tencentcloud/tencentcloud/internal/helper"
)

func DataSourceTencentCloudKubernetesClusterLevels() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceTencentCloudKubernetesClusterLevelsRead,
		Schema: map[string]*schema.Schema{
			"cluster_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Specify cluster Id, if set will only query current cluster's available levels.",
			},

			"list": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: "List of level information.",
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"alias": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Alias used for pass to cluster level arguments.",
						},
						"crd_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Number of CRDs.",
						},
						"config_map_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Number of ConfigMaps.",
						},
						"enable": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: "Indicates whether the current level enabled.",
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: "Level name.",
						},
						"node_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Number of nodes.",
						},
						"other_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Number of others.",
						},
						"pod_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: "Number of pods.",
						},
					},
				},
			},

			"result_output_file": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: "Used to save results.",
			},
		},
	}
}

func dataSourceTencentCloudKubernetesClusterLevelsRead(d *schema.ResourceData, meta interface{}) error {
	defer tccommon.LogElapsed("data_source.tencentcloud_kubernetes_cluster_levels.read")()
	defer tccommon.InconsistentCheck(d, meta)()

	logId := tccommon.GetLogId(nil)
	ctx := tccommon.NewResourceLifeCycleHandleFuncContext(context.Background(), logId, d, meta)

	service := TkeService{client: meta.(tccommon.ProviderMeta).GetAPIV3Conn()}

	var (
		clusterID string
	)
	if v, ok := d.GetOk("cluster_id"); ok {
		clusterID = v.(string)
	}
	paramMap := make(map[string]interface{})
	if v, ok := d.GetOk("cluster_id"); ok {
		paramMap["ClusterID"] = helper.String(v.(string))
	}

	var respData []*tke.ClusterLevelAttribute
	err := resource.Retry(tccommon.ReadRetryTimeout, func() *resource.RetryError {
		result, e := service.DescribeKubernetesClusterLevelsByFilter(ctx, paramMap)
		if e != nil {
			return tccommon.RetryError(e)
		}
		respData = result
		return nil
	})
	if err != nil {
		return err
	}

	levels := make([]string, 0, len(respData))
	itemsList := make([]map[string]interface{}, 0, len(respData))
	if respData != nil {
		for _, items := range respData {
			itemsMap := map[string]interface{}{}

			var name string
			if items.Name != nil {
				itemsMap["name"] = items.Name
				name = *items.Name
			}

			if items.Alias != nil {
				itemsMap["alias"] = items.Alias
			}

			if items.CRDCount != nil {
				itemsMap["crd_count"] = items.CRDCount
			}

			if items.ConfigMapCount != nil {
				itemsMap["config_map_count"] = items.ConfigMapCount
			}

			if items.Enable != nil {
				itemsMap["enable"] = items.Enable
			}

			if items.NodeCount != nil {
				itemsMap["node_count"] = items.NodeCount
			}

			if items.OtherCount != nil {
				itemsMap["other_count"] = items.OtherCount
			}

			if items.PodCount != nil {
				itemsMap["pod_count"] = items.PodCount
			}

			levels = append(levels, name)
			itemsList = append(itemsList, itemsMap)
		}

		_ = d.Set("list", itemsList)
	}

	d.SetId(strings.Join([]string{clusterID, helper.DataResourceIdsHash(levels)}, tccommon.FILED_SP))

	output, ok := d.GetOk("result_output_file")
	if ok && output.(string) != "" {
		if e := tccommon.WriteToFile(output.(string), itemsList); e != nil {
			return e
		}
	}

	return nil
}
